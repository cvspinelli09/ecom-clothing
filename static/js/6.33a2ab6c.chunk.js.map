{"version":3,"sources":["components/checkout-item/checkout-item.styles.jsx","components/checkout-item/checkout-item.component.jsx","components/stripe-button/stripe-button.component.jsx","pages/checkout/checkout.styles.jsx","pages/checkout/checkout.component.jsx"],"names":["CheckoutItemContainer","styled","div","ImageContainer","TextContainer","span","QuantityContainer","RemoveButtonContainer","connect","dispatch","clearItem","item","clearItemFromCart","addItem","removeItem","cartItem","name","imageUrl","price","quantity","src","alt","onClick","StripeCheckoutButton","priceForStripe","label","billingAddress","shippingAddress","image","description","amount","panelLabel","token","axios","url","method","data","then","response","alert","catch","error","console","log","JSON","parse","stripeKey","CheckoutPageContainer","CheckoutHeaderContainer","HeaderBlockContainer","TotalContainer","WarningContainer","mapStateToProps","createStructuredSelector","cartItems","selectCartItems","total","selectCartTotal","map","key","id"],"mappings":"6iCAEO,IAAMA,EAAwBC,IAAOC,IAAV,KAcrBC,EAAiBF,IAAOC,IAAV,KAUdE,EAAgBH,IAAOI,KAAV,KAIbC,EAAoBL,YAAOG,EAAPH,CAAH,KAYjBM,EAAwBN,IAAOC,IAAV,KCDnBM,cACX,MAPuB,SAAAC,GAAQ,MAAK,CACpCC,UAAW,SAAAC,GAAI,OAAIF,EAASG,YAAkBD,KAC9CE,QAAS,SAAAF,GAAI,OAAIF,EAASI,YAAQF,KAClCG,WAAY,SAAAH,GAAI,OAAIF,EAASK,YAAWH,QAG7BH,EA3BM,SAAC,GAAmD,IAAjDO,EAAgD,EAAhDA,SAAUL,EAAsC,EAAtCA,UAAWG,EAA2B,EAA3BA,QAASC,EAAkB,EAAlBA,WAC1CE,EAAoCD,EAApCC,KAAMC,EAA8BF,EAA9BE,SAAUC,EAAoBH,EAApBG,MAAOC,EAAaJ,EAAbI,SAC/B,OACE,kBAACnB,EAAD,KACE,kBAACG,EAAD,KACE,yBAAKiB,IAAKH,EAAUI,IAAI,UAE1B,kBAACjB,EAAD,SAAiBY,EAAjB,KACA,kBAACV,EAAD,KACE,yBAAKgB,QAAS,kBAAMR,EAAWC,KAA/B,UACA,kCAAQI,EAAR,KACA,yBAAKG,QAAS,kBAAMT,EAAQE,KAA5B,WAEF,kBAACX,EAAD,SAAiBc,EAAjB,KACA,kBAACX,EAAD,CAAuBe,QAAS,kBAAMZ,EAAUK,KAAhD,c,oCCYOQ,EApCc,SAAC,GAAe,IAAbL,EAAY,EAAZA,MACtBM,EAAyB,IAARN,EAmBvB,OACI,kBAAC,IAAD,CACIO,MAAM,UACNT,KAAK,qBACLU,gBAAc,EACdC,iBAAe,EACfC,MAAM,iCACNC,YAAW,yBAAoBX,GAC/BY,OAAQN,EACRO,WAAW,UACXC,MA1BQ,SAAAA,GACZC,IAAM,CACFC,IAAK,UACLC,OAAQ,OACRC,KAAM,CACFN,OAAQN,EACRQ,WAELK,MAAK,SAAAC,GACJC,MAAM,yBACPC,OAAM,SAAAC,GACLC,QAAQC,IAAI,kBAAmBC,KAAKC,MAAMJ,IAC1CF,MAAM,+FAeNO,UA7Be,gD,8pCCJpB,IAAMC,EAAwB9C,IAAOC,IAAV,KAkBrB8C,EAA0B/C,IAAOC,IAAV,KAQvB+C,EAAuBhD,IAAOC,IAAV,KAiBpBgD,EAAiBjD,IAAOC,IAAV,KAMdiD,EAAmBlD,IAAOC,IAAV,KCFvBkD,EAAkBC,YAAyB,CAC7CC,UAAWC,IACXC,MAAOC,MAGIjD,sBAAQ4C,EAAR5C,EArCM,SAAC,GAAD,IAAG8C,EAAH,EAAGA,UAAWE,EAAd,EAAcA,MAAd,OACnB,kBAACT,EAAD,KACE,kBAACC,EAAD,KACE,kBAACC,EAAD,KACE,0CAEF,kBAACA,EAAD,KACE,8CAEF,kBAACA,EAAD,KACE,2CAEF,kBAACA,EAAD,KACE,wCAEF,kBAACA,EAAD,KACE,0CAGHK,EAAUI,KAAI,SAAA3C,GAAQ,OACrB,kBAAC,EAAD,CAAc4C,IAAK5C,EAAS6C,GAAI7C,SAAUA,OAE5C,kBAACmC,EAAD,iBAA0BM,EAA1B,KACA,kBAACL,EAAD,gEAEE,6BAFF,+CAKA,kBAAC,EAAD,CAAsBjC,MAAOsC","file":"static/js/6.33a2ab6c.chunk.js","sourcesContent":["import styled from 'styled-components';\n\nexport const CheckoutItemContainer = styled.div`\n    width: 100%;\n    display: flex;\n    min-height: 100px;\n    border-bottom: 1px solid darkgrey;\n    padding: 15px 0;\n    font-size: 20px;\n    align-items: center;\n\n    @media screen and (max-width: 800px) {\n        font-size: 18px;\n    }\n`;\n\nexport const ImageContainer = styled.div`\n    width: 23%;\n    padding-right: 15px;\n\n    img {\n      width: 100%;\n      height: 100%;\n    }\n`;\n\nexport const TextContainer = styled.span`\n    width: 23%;\n`;\n\nexport const QuantityContainer = styled(TextContainer)`\n    display: flex;\n\n    span {\n        margin: 0 10px;\n    }\n\n    div {\n        cursor: pointer;\n    }\n`;\n\nexport const RemoveButtonContainer = styled.div`\n    padding-left: 12px;\n    cursor: pointer;\n`;","import React from 'react';\nimport { connect } from 'react-redux';\n\nimport { clearItemFromCart, addItem, removeItem } from '../../redux/cart/cart.actions';\n\nimport {\n  CheckoutItemContainer,\n  ImageContainer,\n  TextContainer,\n  QuantityContainer,\n  RemoveButtonContainer\n} from './checkout-item.styles';\n\n\nconst CheckoutItem = ({ cartItem, clearItem, addItem, removeItem })  => {\n    const { name, imageUrl, price, quantity } = cartItem;\n    return (\n      <CheckoutItemContainer>\n        <ImageContainer>\n          <img src={imageUrl} alt=\"item\" />\n        </ImageContainer>\n        <TextContainer> {name} </TextContainer>\n        <QuantityContainer>\n          <div onClick={() => removeItem(cartItem)} >&#10094;</div>\n          <span> {quantity} </span>\n          <div onClick={() => addItem(cartItem)} >&#10095;</div>\n        </QuantityContainer>\n        <TextContainer> {price} </TextContainer>\n        <RemoveButtonContainer onClick={() => clearItem(cartItem)}>\n          &#10005;\n        </RemoveButtonContainer>\n      </CheckoutItemContainer>\n    );\n};\n\nconst mapDispatchToProps = dispatch => ({\n    clearItem: item => dispatch(clearItemFromCart(item)),\n    addItem: item => dispatch(addItem(item)),\n    removeItem: item => dispatch(removeItem(item))\n});\n\nexport default connect(\n    null,\n    mapDispatchToProps\n)(CheckoutItem);\n","import React from 'react';\nimport StripeCheckout from 'react-stripe-checkout';\nimport axios from 'axios';\n\nconst StripeCheckoutButton = ({ price }) => {\n    const priceForStripe = price * 100;\n    const PublishableKey = \"pk_test_7xDzlu7dhA4mZ2hRCOA2ga4h00Kc9vFFdF\";\n\n    const onToken = token => {\n        axios({\n            url: 'payment',\n            method: 'post',\n            data: {\n                amount: priceForStripe,\n                token\n            }\n        }).then(response => {\n            alert('Payment successful')\n        }).catch(error => {\n            console.log('Payment error: ', JSON.parse(error));\n            alert('There was an issue with your payment. Please make sure you use the provided credit card');\n        });\n    };\n\n    return (\n        <StripeCheckout\n            label='Pay Now'\n            name='CRWN Clothing Ltd.'\n            billingAddress\n            shippingAddress\n            image='https://svgshare.com/i/CUz.svg'\n            description={`Your total is $${price}`}\n            amount={priceForStripe}\n            panelLabel='Pay Now'\n            token={onToken}\n            stripeKey={PublishableKey}\n        />\n    );\n};\n\nexport default StripeCheckoutButton;\n","import styled from 'styled-components';\n\nexport const CheckoutPageContainer = styled.div`\n    width: 55%;\n    min-height: 90vh;\n    display: flex;\n    flex-direction: column;\n    align-items: center;\n    margin: 50px auto 0;\n\n    button {\n        margin-left: auto;\n        margin-top: 50px;\n    }\n\n    @media screen and (max-width: 800px) {\n        width: 90%;\n    }\n`;\n\nexport const CheckoutHeaderContainer = styled.div`\n    width: 100%;\n    padding: 10px 0;\n    display: flex;\n    justify-content: space-between;\n    border-bottom: 1px solid darkgrey;\n`;\n\nexport const HeaderBlockContainer = styled.div`\n    text-transform: capitalize;\n    width: 23%;\n\n    &:last-child {\n      width: 8%;\n    }\n\n    @media screen and (max-wodth: 800px) {\n        width: 22%;\n\n        &:last-child {\n            width: 12%;\n        }\n    }\n`;\n\nexport const TotalContainer = styled.div`\n    margin-top: 30px;\n    margin-left: auto;\n    font-size: 22px;\n`;\n\nexport const WarningContainer = styled.div`\n    text-align: center;\n    margin-top: 40px;\n    font-size: 24px;\n    color: red;\n`;\n","import React from 'react';\nimport { connect } from 'react-redux';\nimport { createStructuredSelector } from 'reselect';\n\nimport CheckoutItem from '../../components/checkout-item/checkout-item.component';\nimport StripeCheckoutButton from '../../components/stripe-button/stripe-button.component';\n\nimport { selectCartItems, selectCartTotal } from '../../redux/cart/cart.selectors';\n \nimport {\n  CheckoutPageContainer,\n  CheckoutHeaderContainer,\n  HeaderBlockContainer,\n  TotalContainer,\n  WarningContainer\n} from './checkout.styles';\n\nconst CheckoutPage = ({ cartItems, total }) => (\n  <CheckoutPageContainer>\n    <CheckoutHeaderContainer>\n      <HeaderBlockContainer>\n        <span>Product</span>\n      </HeaderBlockContainer>\n      <HeaderBlockContainer>\n        <span>Description</span>\n      </HeaderBlockContainer>\n      <HeaderBlockContainer>\n        <span>Quantity</span>\n      </HeaderBlockContainer>\n      <HeaderBlockContainer>\n        <span>Price</span>\n      </HeaderBlockContainer>\n      <HeaderBlockContainer>\n        <span>Remove</span>\n      </HeaderBlockContainer>\n    </CheckoutHeaderContainer>\n    {cartItems.map(cartItem => (\n      <CheckoutItem key={cartItem.id} cartItem={cartItem} />\n    ))}\n    <TotalContainer> TOTAL: ${total} </TotalContainer>\n    <WarningContainer>\n      *Please use the following test credit card for payments*\n      <br />\n      4242 4242 4242 4242 - Exp: 01/20 - CVV: 123\n    </WarningContainer>\n    <StripeCheckoutButton price={total} />\n  </CheckoutPageContainer>\n);\n\nconst mapStateToProps = createStructuredSelector({\n    cartItems: selectCartItems,\n    total: selectCartTotal\n});\n\nexport default connect(mapStateToProps)(CheckoutPage);\n\n"],"sourceRoot":""}